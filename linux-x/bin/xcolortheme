#!/usr/bin/env python3
"""
A utility to tune color themes.
"""

import json
import os, sys
import colour
import subprocess as sp
import io

DEFAULT_COLOR_JSON_PATH = os.path.join(os.environ["HOME"], ".cache/wal/colors.json")
SPECIAL_COLORS = ["foreground", "background", "cursor"]
HELP_MSG = """\
help: print this message.
load [xres/wal] [path/-]: load color theme from Xresource or wal json file. "-" is for the default location.
save [xres/wal] [path]: save color theme to Xresource file or wal json file.
+ [all/regular/special/COLORNAME]: add the name(-set) to the name selection.
- [all/regular/special/COLORNAME]: remove the name(-set) from the name selection.
= [all/regular/special/COLORNAME]: set the name selection to the name(-set).
pushsel: save the current name selection and set new selection to all names.
popsel: restore the name selection.
brightness delta: adjust the brightness of the selected names.
saturation delta: adjust the saturation of the selected names.
hue delta: adjust the hue of the selected names.
set dst_name src_name: set the color of dst_name to the src_name.
swap name_1 name_2: swap the colors of name_1 and name_2.
preview: preview the current theme through escape sequence.
ansify: rearrange the 16 color according to the ANSI convention.
apply: apply the current theme to the terminal through escape sequence.
print: print the color table.

COLORNAME can be background/foreground/cursor/color{0 ... 15}.
"""

def help():
    sys.stdout.write(HELP_MSG)

def load_json(path):
    if path == "":
        path = DEFAULT_COLOR_JSON_PATH
    with open(path, "r") as f:
        json_data = json.load(f)
    data = {}
    for i in range(len(SPECIAL_COLORS)):
        if SPECIAL_COLORS[i] in json_data["special"]:
            data[SPECIAL_COLORS[i]] = json_data["special"][SPECIAL_COLORS[i]]
    for i in range(16):
        name = "color{}".format(i)
        if name in json_data["colors"]:
            data[name] = json_data["colors"][name]
    return data

def apply_color(data):
    for i in range(len(SPECIAL_COLORS)):
        if SPECIAL_COLORS[i] in data:
            sys.stdout.write("\033]{};{}\007".format(10 + i, data[SPECIAL_COLORS[i]]))
    for i in range(16):
        name = "color{}".format(i)
        if name in data:
            sys.stdout.write("\033]4;{};{}\007".format(i, data[name]))

def load_xres(path):
    data = { }
    if path is None or path == "":
        f = io.StringIO(sp.check_output(["xrdb","-query"]).decode("utf-8"))
    else:
        f = open(path, "r")
    # The current parssing is very rough
    for line in f:
        kv = line.split(":", 1)
        for kw in SPECIAL_COLORS:
            if kw in kv[0] and kw not in data:
                data[kw] = kv[1].strip()
        for i in range(16):
            kw = "color{}".format(i)
            if kw in kv[0] and kw not in data:
                data[kw] = kv[1].strip()
    return data

def color_write(s, b, f, t):
    format = ";".join(["38", "2", str(int(f[1:3], 16)), str(int(f[3:5], 16)), str(int(f[5:7], 16)), "48", "2", str(int(b[1:3], 16)), str(int(b[3:5], 16)), str(int(b[5:7], 16))])
    s.write("\x1b[%sm%s\x1b[0m" % (format, t))

def print_format_table(data):
    if data is None:
        print("The quick brown fox jumps over the lazy dog.")
        for bg in range(40,48):
            format = ";".join(["0", str(bg - 10), str(bg)])
            sys.stdout.write('\x1b[%sm %s \x1b[0m' % (format, "██"))
        sys.stdout.write("\n")
        for bg in range(100,108):
            format = ";".join(["0", str(bg - 10), str(bg)])
            sys.stdout.write('\x1b[%sm %s \x1b[0m' % (format, "██"))
        sys.stdout.write("\n")
    else:
        color_write(sys.stdout, data["background"], data["foreground"], "The quick brown fox jumps over the lazy dog.")
        sys.stdout.write("\n")
        for i in range(8):
            color_write(sys.stdout, data["color{}".format(i)], data["color{}".format(i)], " ██ ")
        sys.stdout.write("\n")
        for i in range(8, 16):
            color_write(sys.stdout, data["color{}".format(i)], data["color{}".format(i)], " ██ ")
        sys.stdout.write("\n")

def adjust_brightness(data, selector, amount):
    print(selector)
    colors = {}
    for k in data:
        colors[k] = colour.Color(data[k])
        if k in selector:
            colors[k].luminance = min(1, max(0, colors[k].luminance + amount))
    for k in colors:
        colors[k] = colors[k].hex_l
    return colors

def adjust_saturation(data, selector, amount):
    colors = {}
    for k in data:
        colors[k] = colour.Color(data[k])
        if k in selector:
            colors[k].saturation = min(1, max(0, colors[k].saturation + amount))
    for k in colors:
        colors[k] = colors[k].hex_l
    return colors

def adjust_hue(data, selector, amount):
    colors = {}
    for k in data:
        colors[k] = colour.Color(data[k])
        if k in selector:
            colors[k].hue = min(1, max(0, (colors[k].hue + amount) % 1))
    for k in colors:
        colors[k] = colors[k].hex_l
    return colors

def ansify(data):

    def color_pair(pair):
        if pair[0].luminance > pair[1].luminance:
            return (pair[1], pair[0])
        return pair

    colors = []
    for k in range(1, 7):
        colors.append(color_pair((colour.Color(data['color{}'.format(k)]), colour.Color(data['color{}'.format(k + 8)]))))
        pass
    colors.sort(key = lambda item : item[0].hue)
    data['color1'] = colors[0][0].hex_l
    data['color9'] = colors[0][1].hex_l
    data['color3'] = colors[1][0].hex_l
    data['color11'] = colors[1][1].hex_l
    data['color2'] = colors[2][0].hex_l
    data['color10'] = colors[2][1].hex_l
    data['color6'] = colors[3][0].hex_l
    data['color14'] = colors[3][1].hex_l
    data['color4'] = colors[4][0].hex_l
    data['color12'] = colors[4][1].hex_l
    data['color5'] = colors[5][0].hex_l
    data['color13'] = colors[5][1].hex_l
    black = color_pair((colour.Color(data['color0']), colour.Color(data['color8'])))
    white = color_pair((colour.Color(data['color7']), colour.Color(data['color15'])))
    if black[0].luminance > white[0].luminance:
        tmp = black; black = white; white = tmp
        pass
    data['color0'] = black[0].hex_l
    data['color8'] = black[1].hex_l
    data['color7'] = white[0].hex_l
    data['color15'] = white[1].hex_l
    pass

def save_xres(data, path):
    f = sys.stdout if path is None else open(path, "w")
    for kw in SPECIAL_COLORS:
        if kw in data:
            f.write("*{}: {}\n".format(kw, data[kw]))
    for i in range(16):
        kw = "color{}".format(i)
        if kw in data:
            f.write("*{}: {}\n".format(kw, data[kw]))
    if f is not sys.stdout:
        f.close()
        pass
    pass

def save_json(data, path):
    f = sys.stdout if path is None else open(path, "w")
    out = { "special" : {}, "colors" : {} }
    for kw in SPECIAL_COLORS:
        if kw in data:
            out["special"][kw] = data[kw]
    for i in range(16):
        kw = "color{}".format(i)
        if kw in data:
            out["colors"][kw] = data[kw]
    f.write(json.dumps(out, indent=4, sort_keys=True))
    if f is not sys.stdout:
        f.close()

def save_rofi(data, path):
    f = sys.stdout if path is None else open(path, "w")
    f.write("* {")
    for kw in SPECIAL_COLORS:
        f.write("x-{}:{};".format(kw, data[kw]))
    for i in range(16):
        kw = "color{}".format(i)
        f.write("x-{}:{};".format(kw, data[kw]))
    f.write("}\n")
    if f is not sys.stdout:
        f.close()

selector_stack = []
selector = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
i = 0
cmds = sys.argv[1:]
data = None
while i < len(cmds):
    cmd = cmds[i]
    i += 1

    if cmd == "load" and i + 1 < len(cmds):
        kind = cmds[i]
        source = cmds[i + 1]
        i += 2
        if kind == "xres":
            data = load_xres(None if source == "-" else source)
        elif kind == "wal":
            data = load_json(None if source == "-" else source)
        continue
    elif cmd == "print":
        print_format_table(None)
        continue
    elif cmd == "help":
        help()
    elif data is None:
        continue

    if cmd == "save" and i + 1 < len(cmds):
        kind = cmds[i]
        source = cmds[i + 1]
        i += 2
        if kind == "xres":
            save_xres(data, None if source == "-" else source)
        elif kind == "wal":
            save_json(data, None if source == "-" else source)
        elif kind == "rofi":
            save_rofi(data, None if source == "-" else source)
    elif cmd == "brightness" and i < len(cmds):
        data = adjust_brightness(data, selector, float(cmds[i]))
        i += 1
    elif cmd == "saturation" and i < len(cmds):
        data = adjust_saturation(data, selector, float(cmds[i]))
        i += 1
    elif cmd == "hue" and i < len(cmds):
        data = adjust_hue(data, selector, float(cmds[i]))
        i += 1
    elif (cmd == "+" or cmd == "-" or cmd == "=") and i < len(cmds):
        if cmds[i] == "all":
            target = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
        elif cmds[i] == "regular":
            target = ["color{}".format(i) for i in range(16)]
        elif cmds[i] == "special":
            target = list(SPECIAL_COLORS)
        elif cmds[i] in data:
            target = [cmds[i]]
        else:
            target = None

        if target is not None:
            if cmd == "+":
                for k in target:
                    if k not in selector:
                        selector.append(k)
            elif cmd == "-":
                for k in target:
                    if k in selector:
                        selector.remove(k)
            elif cmd == "=":
                selector = target

            i += 1
    elif cmd == "pushsel":
        selector_stack.append(selector)
        selector = SPECIAL_COLORS + ["color{}".format(i) for i in range(16)]
    elif cmd == "popsel":
        if len(selector_stack) > 0:
            selector = selector_stack[len(selector_stack)].pop()
    elif cmd == "swap" and i + 1 < len(cmds):
        if cmds[i] in data and cmds[i + 1] in data:
            tmp = data[cmds[i]]
            data[cmds[i]] = data[cmds[i + 1]]
            data[cmds[i + 1]] = tmp
            i += 2
    elif cmd == "set" and i + 1 < len(cmds):
        if cmds[i] in data and cmds[i + 1] in data:
            data[cmds[i]] = data[cmds[i + 1]]
            i += 2
    elif cmd == "ansify":
        ansify(data)
    elif cmd == "apply":
        apply_color(data)
    elif cmd == "preview":
        print_format_table(data)
