#!/usr/bin/env python3
"""
Example: [this file] -t firefox-esr.desktop -r chromium.desktop
"""

import sys, os
from xdg import XDG_DATA_DIRS
from configparser import RawConfigParser
import logging
import subprocess
import argparse
import re

parser = argparse.ArgumentParser(
    formatter_class = argparse.RawDescriptionHelpFormatter,
    epilog = """
Examples:
  $0 -s X                # List all mime entries related to X.
  $0 -m pdf              # List all desktop entries that can open pdf files.
  $0 -m pdf -r X.desktop # Replace pdf opener.
"""
)
parser.add_argument("-m", dest = "mime_type")
parser.add_argument("-t", dest = "target")
parser.add_argument("-s", dest = "search")
parser.add_argument("-r", dest = "replace")
args = parser.parse_args()

if args.mime_type is None and args.target is None and args.search is None:
    sys.stderr.write("Need -m, -t or -s\n")
    sys.exit(1)

logging.basicConfig(level = logging.DEBUG)
logger = logging.getLogger(__file__)

def find_in_paths(filename, paths):
    ret = []
    for path in paths:
        if not os.path.isdir(path):
            continue
        for fn in os.listdir(path):
            if fn == filename:
                ret.append(os.path.join(path, fn))
    return ret

dirs = [os.path.join(p, "applications") for p in XDG_DATA_DIRS]
results = find_in_paths("mimeinfo.cache", dirs)

if len(results) == 0:
    sys.stderr.write("Cannot find mimeinfo.cache in {}\n".format(dirs))
    sys.exit(1)
    pass

data = RawConfigParser(strict = False)
with open(results[0], "r") as f:
    data.read_file(f)

has_sideeffect = False

for mime, apps_str in data.items("MIME Cache"):
    apps = list(filter(len, apps_str.split(";")))
    found = False
    if args.mime_type:
        found = args.mime_type in mime
    elif args.target:
        found = args.target in apps
    else:
        for item in apps:
            if re.search(args.search, item):
                found = True
                break

    if not found:
        continue
    if args.target is None and args.replace is None:
        sys.stdout.write("{}:{}\n".format(mime, " ".join(apps)))
    else:
        logger.debug("Found mimetype {} with apps {}".format(mime, apps))
        if len(apps) == 1:
            logger.info("Skip {} since {} is the only app".format(mime, args.target))
            continue
        # if apps[0] != args.target:
        #     logger.info("Skip {} since {} is not the first app".format(mime, args.target))
        #     continue
        if args.replace not in apps:
            logger.info("Skip {} since {} is not in apps".format(mime, args.replace))
            continue
        cmd = ["xdg-mime", "default",  args.replace, mime]
        logger.info("Calling {}".format(cmd))
        subprocess.check_call(" ".join(cmd), shell = True)
        has_sideeffect = True

if has_sideeffect:
    print('Reminder: it is recommended to run "update-desktop-database" and "update-mime-database" if you changed the setting.')
